{"ast":null,"code":"var _jsxFileName = \"/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MapComponent from './MapComponent'; // Assuming this is the name of your map file\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Spinner } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [loading, setLoading] = useState(false); // New state to track loading\n\n  const handleMapClick = async event => {\n    setLoading(true); // Start loading\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      location: {\n        lat,\n        lng\n      }\n    }, async (results, status) => {\n      if (status === 'OK') {\n        const addressComponents = results[0].address_components;\n        const countryComponent = addressComponents.find(component => component.types.includes('country'));\n        if (countryComponent) {\n          const country = countryComponent.long_name;\n          try {\n            const flagResponse = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n            const flagData = await flagResponse.json();\n            const flag = flagData[0].flags.svg;\n            setCountryInfo({\n              country,\n              flag\n            });\n            setLoading(false); // Stop loading after fetching\n          } catch (error) {\n            console.error('Failed to fetch flag data', error);\n            setLoading(false); // Stop loading if there is an error\n          }\n        } else {\n          console.log('No country found at this location');\n          setLoading(false); // Stop loading if no country component found\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n        setLoading(false); // Stop loading if geocoding fails\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-danger\",\n      style: {\n        marginTop: '5vh'\n      },\n      children: \"Country Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '0.75em'\n      },\n      children: \"Click anywhere on the map to see the country name and flag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapHolder\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(MapComponent, {\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : countryInfo && /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '60vw',\n          backgroundColor: 'aliceblue',\n          marginTop: '3vh',\n          textAlign: 'center',\n          boxShadow: '0 4px 8px rgba(0,0,0,0.25)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            className: \"text-dark\",\n            style: {\n              fontSize: '2em'\n            },\n            children: \"Country Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            style: {\n              fontSize: '1.25em'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-primary\",\n              children: \"Country:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 19\n            }, this), \" \", countryInfo.country, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 87\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: countryInfo.flag,\n              alt: `Flag of ${countryInfo.country}`,\n              style: {\n                height: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tsTyqBhR0aJIZljrEzeq3RvYlCU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapComponent","Card","Spinner","jsxDEV","_jsxDEV","App","_s","countryInfo","setCountryInfo","loading","setLoading","handleMapClick","event","lat","latLng","lng","geocoder","window","google","maps","Geocoder","geocode","location","results","status","addressComponents","address_components","countryComponent","find","component","types","includes","country","long_name","flagResponse","fetch","flagData","json","flag","flags","svg","error","console","log","className","style","textAlign","children","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","display","flexDirection","alignItems","onClick","animation","role","width","backgroundColor","boxShadow","Body","Title","Text","src","alt","height","_c","$RefreshReg$"],"sources":["/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport MapComponent from './MapComponent';  // Assuming this is the name of your map file\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Spinner } from 'react-bootstrap';\n\nfunction App() {\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [loading, setLoading] = useState(false);  // New state to track loading\n\n  const handleMapClick = async (event) => {\n    setLoading(true);  // Start loading\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n\n    geocoder.geocode({ location: { lat, lng } }, async (results, status) => {\n      if (status === 'OK') {\n        const addressComponents = results[0].address_components;\n        const countryComponent = addressComponents.find(component =>\n          component.types.includes('country')\n        );\n        if (countryComponent) {\n          const country = countryComponent.long_name;\n          try {\n            const flagResponse = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n            const flagData = await flagResponse.json();\n            const flag = flagData[0].flags.svg;\n            setCountryInfo({ country, flag });\n            setLoading(false);  // Stop loading after fetching\n          } catch (error) {\n            console.error('Failed to fetch flag data', error);\n            setLoading(false);  // Stop loading if there is an error\n          }\n        } else {\n          console.log('No country found at this location');\n          setLoading(false);  // Stop loading if no country component found\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n        setLoading(false);  // Stop loading if geocoding fails\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center' }}>\n      <h1 className=\"text-danger\" style={{ marginTop: '5vh' }}>Country Information</h1>\n      <p style={{ fontSize: '0.75em'}}>Click anywhere on the map to see the country name and flag.</p>\n      <div className='mapHolder' style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <MapComponent onClick={handleMapClick} />\n        {loading ? (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        ) : (\n          countryInfo && (\n            <Card \n              style={{ \n                width: '60vw', \n                backgroundColor: 'aliceblue',\n                marginTop: '3vh', \n                textAlign: 'center',\n                boxShadow: '0 4px 8px rgba(0,0,0,0.25)'\n              }}\n            >\n              <Card.Body>\n                <Card.Title className=\"text-dark\" style={{ fontSize: '2em' }}>Country Information</Card.Title>\n                <Card.Text style={{ fontSize: '1.25em' }}>\n                  <span className=\"text-primary\">Country:</span> {countryInfo.country}<br />\n                  <img src={countryInfo.flag} alt={`Flag of ${countryInfo.country}`} style={{ height: '100px' }} />\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}