{"ast":null,"code":"var _jsxFileName = \"/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { GoogleMap, LoadScript, useJsApiLoader } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px'\n};\nconst center = {\n  lat: -34.397,\n  lng: 150.644\n};\nfunction MapComponent({\n  setCountry\n}) {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: \"YOUR_API_KEY\",\n    // Ensure you replace \"YOUR_API_KEY\" with your actual Google Maps API key\n    libraries: ['places'] // This is necessary for utilizing the Geocoding API\n  });\n  const handleMapClick = async event => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      location: {\n        lat,\n        lng\n      }\n    }, (results, status) => {\n      if (status === 'OK') {\n        if (results[0]) {\n          const addressComponents = results[0].address_components;\n          const countryComponent = addressComponents.find(component => component.types.includes('country'));\n          if (countryComponent) {\n            setCountry(countryComponent.long_name);\n          } else {\n            console.log('No country found at this location');\n          }\n        } else {\n          console.log('No results found');\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n      }\n    });\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 5,\n    onClick: handleMapClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n}\n_s(MapComponent, \"mLN67oIZdYDfCjxG2Fcvbwz7Mfk=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","GoogleMap","LoadScript","useJsApiLoader","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","MapComponent","setCountry","_s","isLoaded","googleMapsApiKey","libraries","handleMapClick","event","latLng","geocoder","window","google","maps","Geocoder","geocode","location","results","status","addressComponents","address_components","countryComponent","find","component","types","includes","long_name","console","log","error","mapContainerStyle","zoom","onClick","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/MapComponent.js"],"sourcesContent":["import React from 'react';\nimport { GoogleMap, LoadScript, useJsApiLoader } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px'\n};\n\nconst center = {\n  lat: -34.397,\n  lng: 150.644\n};\n\nfunction MapComponent({ setCountry }) {\n  const { isLoaded } = useJsApiLoader({\n    googleMapsApiKey: \"YOUR_API_KEY\", // Ensure you replace \"YOUR_API_KEY\" with your actual Google Maps API key\n    libraries: ['places'] // This is necessary for utilizing the Geocoding API\n  });\n\n  const handleMapClick = async (event) => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n\n    geocoder.geocode({ location: { lat, lng } }, (results, status) => {\n      if (status === 'OK') {\n        if (results[0]) {\n          const addressComponents = results[0].address_components;\n          const countryComponent = addressComponents.find(component =>\n            component.types.includes('country')\n          );\n          if (countryComponent) {\n            setCountry(countryComponent.long_name);\n          } else {\n            console.log('No country found at this location');\n          }\n        } else {\n          console.log('No results found');\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n      }\n    });\n  };\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={5}\n      onClick={handleMapClick}\n    >\n      {/* Child components, like markers or shapes */}\n    </GoogleMap>\n  ) : <div>Loading...</div>;\n}\n\nexport default MapComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,UAAU,EAAEC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/E,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE,CAAC,MAAM;EACZC,GAAG,EAAE;AACP,CAAC;AAED,SAASC,YAAYA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAM;IAAEC;EAAS,CAAC,GAAGZ,cAAc,CAAC;IAClCa,gBAAgB,EAAE,cAAc;IAAE;IAClCC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;EACxB,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;IACtC,MAAMT,GAAG,GAAGS,KAAK,CAACC,MAAM,CAACV,GAAG,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGQ,KAAK,CAACC,MAAM,CAACT,GAAG,CAAC,CAAC;IAC9B,MAAMU,QAAQ,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC;IAElDJ,QAAQ,CAACK,OAAO,CAAC;MAAEC,QAAQ,EAAE;QAAEjB,GAAG;QAAEC;MAAI;IAAE,CAAC,EAAE,CAACiB,OAAO,EAAEC,MAAM,KAAK;MAChE,IAAIA,MAAM,KAAK,IAAI,EAAE;QACnB,IAAID,OAAO,CAAC,CAAC,CAAC,EAAE;UACd,MAAME,iBAAiB,GAAGF,OAAO,CAAC,CAAC,CAAC,CAACG,kBAAkB;UACvD,MAAMC,gBAAgB,GAAGF,iBAAiB,CAACG,IAAI,CAACC,SAAS,IACvDA,SAAS,CAACC,KAAK,CAACC,QAAQ,CAAC,SAAS,CACpC,CAAC;UACD,IAAIJ,gBAAgB,EAAE;YACpBnB,UAAU,CAACmB,gBAAgB,CAACK,SAAS,CAAC;UACxC,CAAC,MAAM;YACLC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAClD;QACF,CAAC,MAAM;UACLD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC;MACF,CAAC,MAAM;QACLD,OAAO,CAACE,KAAK,CAAC,0BAA0B,GAAGX,MAAM,CAAC;MACpD;IACF,CAAC,CAAC;EACJ,CAAC;EAED,OAAOd,QAAQ,gBACbV,OAAA,CAACJ,SAAS;IACRwC,iBAAiB,EAAEnC,cAAe;IAClCG,MAAM,EAAEA,MAAO;IACfiC,IAAI,EAAE,CAAE;IACRC,OAAO,EAAEzB;EAAe;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGf,CAAC,gBACV1C,OAAA;IAAA2C,QAAA,EAAK;EAAU;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC3B;AAACjC,EAAA,CA1CQF,YAAY;EAAA,QACET,cAAc;AAAA;AAAA8C,EAAA,GAD5BrC,YAAY;AA4CrB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}