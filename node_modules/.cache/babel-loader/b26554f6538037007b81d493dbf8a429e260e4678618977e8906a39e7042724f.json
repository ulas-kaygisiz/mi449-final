{"ast":null,"code":"var _jsxFileName = \"/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MapComponent from './MapComponent'; // Assuming this is the name of your map file\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryInfo, setCountryInfo] = useState(null);\n  const handleMapClick = async event => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      location: {\n        lat,\n        lng\n      }\n    }, async (results, status) => {\n      if (status === 'OK') {\n        const addressComponents = results[0].address_components;\n        const countryComponent = addressComponents.find(component => component.types.includes('country'));\n        if (countryComponent) {\n          const country = countryComponent.long_name;\n          const flagResponse = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n          const flagData = await flagResponse.json();\n          const flag = flagData[0].flags.svg;\n          setCountryInfo({\n            country,\n            flag\n          });\n        } else {\n          console.log('No country found at this location');\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-danger\",\n      style: {\n        marginTop: '5vh'\n      },\n      children: \"Country Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '0.75em'\n      },\n      children: \"Click anywhere on the map to see the country name and flag.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mapHolder\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(MapComponent, {\n        onClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), countryInfo && /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '60vw',\n          backgroundColor: 'aliceblue',\n          marginTop: '3vh',\n          textAlign: 'center',\n          boxShadow: '0 4px 8px rgba(0,0,0,0.25)'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            className: \"text-dark\",\n            style: {\n              fontSize: '2em'\n            },\n            children: \"Country Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            style: {\n              fontSize: '1.25em'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-primary\",\n              children: \"Country:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), \" \", countryInfo.country, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 85\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: countryInfo.flag,\n              alt: `Flag of ${countryInfo.country}`,\n              style: {\n                height: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QwzYTVb3R3C5CP3aay4reEpejGI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapComponent","Card","jsxDEV","_jsxDEV","App","_s","countryInfo","setCountryInfo","handleMapClick","event","lat","latLng","lng","geocoder","window","google","maps","Geocoder","geocode","location","results","status","addressComponents","address_components","countryComponent","find","component","types","includes","country","long_name","flagResponse","fetch","flagData","json","flag","flags","svg","console","log","error","className","style","textAlign","children","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","display","flexDirection","alignItems","onClick","width","backgroundColor","boxShadow","Body","Title","Text","src","alt","height","_c","$RefreshReg$"],"sources":["/Users/ulaskaygisiz/Desktop/MSU/SPRING24/MI449/mi449-final/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport MapComponent from './MapComponent';  // Assuming this is the name of your map file\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card } from 'react-bootstrap';\n\nfunction App() {\n  const [countryInfo, setCountryInfo] = useState(null);\n\n  const handleMapClick = async (event) => {\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    const geocoder = new window.google.maps.Geocoder();\n\n    geocoder.geocode({ location: { lat, lng } }, async (results, status) => {\n      if (status === 'OK') {\n        const addressComponents = results[0].address_components;\n        const countryComponent = addressComponents.find(component =>\n          component.types.includes('country')\n        );\n        if (countryComponent) {\n          const country = countryComponent.long_name;\n          const flagResponse = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n          const flagData = await flagResponse.json();\n          const flag = flagData[0].flags.svg;\n          setCountryInfo({ country, flag });\n        } else {\n          console.log('No country found at this location');\n        }\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: 'center' }}>\n      <h1 className=\"text-danger\" style={{ marginTop: '5vh' }}>Country Information</h1>\n      <p style={{ fontSize: '0.75em'}}>Click anywhere on the map to see the country name and flag.</p>\n      <div className='mapHolder' style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <MapComponent onClick={handleMapClick} />\n        {countryInfo && (\n          <Card \n            style={{ \n              width: '60vw', \n              backgroundColor: 'aliceblue',\n              marginTop: '3vh', \n              textAlign: 'center',\n              boxShadow: '0 4px 8px rgba(0,0,0,0.25)'\n            }}\n          >\n            <Card.Body>\n              <Card.Title className=\"text-dark\" style={{ fontSize: '2em' }}>Country Information</Card.Title>\n              <Card.Text style={{ fontSize: '1.25em' }}>\n                <span className=\"text-primary\">Country:</span> {countryInfo.country}<br />\n                <img src={countryInfo.flag} alt={`Flag of ${countryInfo.country}`} style={{ height: '100px' }} />\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}